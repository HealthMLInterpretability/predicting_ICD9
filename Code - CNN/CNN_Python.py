# -*- coding: utf-8 -*-
"""CNN_with_scores.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vDS09p69TN2udTTmESg0p0T3SsG4Ahip
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from keras.utils.np_utils import to_categorical
from keras.layers.merge import concatenate
from keras.layers import Embedding
from keras.layers import Dense, Input, Flatten
from keras.layers import Conv1D, MaxPooling1D, Embedding, Dropout
from keras.layers import Input
from sklearn.model_selection import KFold
from keras.layers.pooling import AveragePooling1D
from keras.layers import BatchNormalization
from keras.wrappers.scikit_learn import KerasClassifier
from keras.layers import Convolution1D
from keras.models import Model
from keras.callbacks import ModelCheckpoint
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.initializers import random_uniform
from keras.layers import LSTM
from sklearn.metrics import balanced_accuracy_score
from sklearn.metrics import accuracy_score
from sklearn.metrics import f1_score
from sklearn.metrics import roc_auc_score

df_TFIDF40 = pd.read_csv('/content/drive/MyDrive/Experiments HealthML CNN/input_ICD9_TFIDF_40.csv') # loading updated csv
df_TFIDF40.rename(columns={'Label': 'ICD9'}, inplace=True)
df_TM5 = pd.read_csv('/content/drive/MyDrive/Experiments HealthML CNN/input_ICD9_TM_5.csv')
df_TM20 = pd.read_csv('/content/drive/MyDrive/Experiments HealthML CNN/input_ICD9_TM_20.csv')
df_TM30 = pd.read_csv('/content/drive/MyDrive/Experiments HealthML CNN/input_ICD9_TM_30.csv')
df_TM30.rename(columns={'top_icd': 'ICD9'}, inplace=True)
df_TM39 = pd.read_csv('/content/drive/MyDrive/Experiments HealthML CNN/input_ICD9_TM_39.csv')

df_list = [df_TFIDF40, df_TM5, df_TM20, df_TM30, df_TM39]
files_list = ['TFIDF_40', 'TM_5', 'TM_20', 'TM_30', 'TM_39']

df_TFIDF40_old = pd.read_csv('/content/drive/MyDrive/Experiments HealthML CNN/input_ICD9_TFIDF_40.csv')

df_TM20.head(4)

print([True for df in df_list if 'ICD9' in df.columns])
print([df.shape for df in df_list]) # correct shapes

print([True for df in df_list if 'ICD9' in df.columns])
print([df.shape for df in df_list])
print([df['ICD9'].value_counts() for df in df_list], end= "\n")

def get_data(df:pd.DataFrame):
 
  ICD9_CODE_map = {
    '414': 0, #chronic heart
    '38':  1, #sepsis
    '410': 2, #heart attack
    '424': 3, #diseases of endocardium
    }
  Y = df.ICD9
  X = df.drop(columns=['ICD9'])
  Y = Y.map({414:0, 38: 1, 410:2, 424: 3})
  Y = to_categorical(Y, 4)
  X = X.values.astype('float')
  X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.33, random_state = 42, shuffle=True) 
  X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1)) 
  X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
  # print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)
  return X_train, X_test, Y_train, Y_test

from sklearn.metrics import accuracy_score
from sklearn.metrics import f1_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
def print_evaluation_scores(y_val, predicted):
    print('Accuracy score: ', accuracy_score(y_val, predicted))
    print('F1 score: ', f1_score(y_val, predicted, average='micro'))
    print('Average precision score: ', precision_score(y_val, predicted, average='micro'))
    print('Average recall score: ', recall_score(y_val, predicted, average='micro'))

# # Original works well with all TMs
def cnn(df:pd.DataFrame, DataName: str):
		print(DataName, ":", df.shape)
		X_train, X_test, Y_train, Y_test = get_data(df)
		model = Sequential()
		model.add(Conv1D(32, 3, activation='relu', input_shape = (X_train.shape[1],1)))
		model.add(BatchNormalization()) 
		model.add(Dropout(0.5)) 
		model.add(MaxPooling1D(2))
		model.add(Flatten())
		model.add(Dense(100, activation='relu'))
		model.add(Dense(4, activation='softmax'))
		model.compile(loss="categorical_crossentropy", optimizer = 'adam', metrics=["accuracy"])

		history = model.fit(X_train, Y_train,validation_split=0.25, epochs = 25, batch_size=32, shuffle=True, verbose=1)  
		predictions = model.predict(X_test)
		Y_pred = predictions.argmax(axis=1)
		Y_test_max = Y_test.argmax(axis=1)
		accuracy = accuracy_score(Y_test_max, Y_pred)
		bal_acc = balanced_accuracy_score(Y_test_max, Y_pred)
		recall =  recall_score(Y_test_max, Y_pred, average='micro')
		f1_weighted = f1_score(Y_test_max, Y_pred, average='weighted')
		f1_average = f1_score(Y_test_max, Y_pred, average='micro')
		precision = precision_score(Y_test_max, Y_pred, average='micro')
		auc = roc_auc_score(Y_test_max, predictions, multi_class='ovr', average='macro')
		results = dict()
		results['accuracy'] = accuracy
		results['bal_acc'] = bal_acc
		results['f1_weighted'] = f1_weighted
		results['f1_average'] = f1_average
		results['auc'] = auc
		results['recall'] = recall
		results['precision'] = precision

		plt.plot(history.history['accuracy'])
		plt.plot(history.history['val_accuracy'])
		plt.title('Model Accuracy for %s' % DataName)
		plt.ylabel('Accuracy')
		plt.xlabel('Epoch')
		plt.legend(['train', 'val'], loc='upper left')
		plt.show()
		plt.plot(history.history['loss'])
		plt.plot(history.history['val_loss'])
		plt.title('Model loss for %s' % DataName)
		plt.ylabel('loss')
		plt.xlabel('epoch')
		plt.legend(['train', 'val'], loc='upper left')
		plt.show()
		return results

lst = ['TFIDF_40', 'TM_5', 'TM_20', 'TM_30', 'TM_39']

results = [cnn(df, lst[i]) for i, df in enumerate(df_list)]

lst = ['TFIDF_40', 'TM_5', 'TM_20', 'TM_30', 'TM_39']
for i, x in enumerate(results):
  print(lst[i], x)

# TFIDF_40 {'bal_acc': 0.860314212255144, 'f1': 0.8537960170495161, 'auc': 0.967266777906099}
# TM_5 {'bal_acc': 0.6099422478298578, 'f1': 0.649340309252282, 'auc': 0.884170958489013}
# TM_20 {'bal_acc': 0.7188808945859412, 'f1': 0.7265992746214581, 'auc': 0.9104712915043676}
# TM_30 {'bal_acc': 0.6967611716140004, 'f1': 0.725909809572342, 'auc': 0.9126227399439928}
# TM_39 {'bal_acc': 0.6769545618046917, 'f1': 0.7128163974376526, 'auc': 0.9027637889886231}

